name: Full CI/CD Pipeline - Angular + Spring Boot

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # ------------------------------------------------------------------
  # üß© FRONTEND JOB ‚Äî Angular + Jest + SonarCloud
  # ------------------------------------------------------------------
  frontend:
    name: üß™ Frontend Tests & Sonar
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run Jest tests with coverage
        run: npx jest --coverage --runInBand

      - name: Security audit (npm)
        run: npm audit --audit-level=high || true

      - name: Upload coverage report (frontend)
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-report
          path: frontend/coverage/

      - name: SonarCloud Scan (frontend)
        uses: SonarSource/sonarcloud-github-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: frontend
          args: >
            -Dsonar.organization=malikdupuis
            -Dsonar.projectKey=MalikDupuis_Blog
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.sources=src
            -Dsonar.tests=src
            -Dsonar.test.inclusions=**/*.spec.ts

  # ------------------------------------------------------------------
  # üß© BACKEND JOB ‚Äî Spring Boot + JaCoCo + SonarCloud
  # ------------------------------------------------------------------
  backend:
    name: ‚öôÔ∏è Backend Tests & Sonar
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
          cache: 'maven'

      - name: Maven clean verify (run tests & generate JaCoCo)
        run: mvn -B clean verify

      - name: Security audit (Maven)
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        run: mvn org.owasp:dependency-check-maven:check \
          -Dnvd.apiKey=${{ secrets.NVD_API_KEY }} \
          -DfailBuildOnCVSS=7 || true


      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-report
          path: backend/target/site/jacoco/

      - name: SonarCloud Scan (backend)
        uses: SonarSource/sonarcloud-github-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: backend
          args: >
            -Dsonar.organization=malikdupuis
            -Dsonar.projectKey=MalikDupuis_Blog
            -Dsonar.java.binaries=target/classes
            -Dsonar.sources=src/main/java
            -Dsonar.tests=src/test/java
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  # ------------------------------------------------------------------
  # üê≥ DOCKER BUILD JOB ‚Äî Triggered only if both succeed
  # ------------------------------------------------------------------
  docker:
    name: üê≥ Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [frontend, backend] # only run if both succeed

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker images
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/blog-frontend:latest ./frontend
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/blog-backend:latest ./backend

      - name: Push Docker images
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/blog-frontend:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/blog-backend:latest

  # ------------------------------------------------------------------
  # üöÄ DEPLOY JOB ‚Äî Automatic AWS ECS Deployment
  # ------------------------------------------------------------------
  deploy:
    name: üöÄ Deploy to AWS ECS
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # üß∞ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # üîÅ Update ECS Services
      - name: Update ECS Backend Service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: backend/backend-task-definition.json
          service: blog-backend-service
          cluster: blog-cluster
          wait-for-service-stability: true

      - name: Update ECS Frontend Service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: frontend/frontend-task-definition.json
          service: blog-frontend-service
          cluster: blog-cluster
          wait-for-service-stability: true
